
pipeline {
  agent any
  stages {
    stage('Build') {
          steps {
              echo 'Executing Build'
              bat './mvnw compile'
          }
      }
      stage('Test') {
          steps {
              echo 'Git Checkout'
              bat './mvnw test'
          }
      }
      stage('Package') {
          steps {
              echo 'Executing Build'
              bat './mvnw package'
          }
          post {
              always {
                  // One or more steps need to be included within each condition's block.
                  junit 'target\\surefire-reports\\*.xml'
              }
              success {
                  // One or more steps need to be included within each condition's block.
                  archiveArtifacts artifacts: 'target\\*.jar', followSymlinks: false
              }
          }
      }
      stage('Move build') {
          steps {
              echo 'moving a build to another directory'
              script{
                sh 'cp target\\*.jar /c/releases/'
              }
          }
      }
      stage ('Java Build confirmation') {
        when {
              expression {
                  getCurrentBuildGitDetails()
              }
          }
        steps {
            echo "Java build has started."
        }
      }   

    }
}

@NonCPS
def getCurrentBuildGitDetails() {
    def changeLogSets = currentBuild.changeSets
    def isOciBuildRequired = false
    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            echo "${entry.commitId} by ${entry.author} on ${new Date(entry.timestamp)}: ${entry.msg}"
            def files = new ArrayList(entry.affectedFiles)
            for (int k = 0; k < files.size(); k++) {
                def file = files[k]
                def modifiedFile = file.path
                def ismodify = modifiedFile.matches("java(.*)")
              if (ismodify) {
                isOciBuildRequired = true
              }
            }
        }
    }
  return isOciBuildRequired
}
